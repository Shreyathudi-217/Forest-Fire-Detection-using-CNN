## Fire Detection Code

# Install Requirements
pip install opencv-python numpy tensorflow twilio

# Testing the Dataset
import smtplib
import cv2
import numpy as np
import tensorflow as tf
import winsound  # For sound alerts on Windows
import smtplib  # For sending email alerts
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from tensorflow.keras.models import load_model

# Load the trained CNN model
MODEL_PATH = "fire_detection_model.h5"  # Replace with your trained model
model = load_model(MODEL_PATH)

# Define class labels
CLASS_NAMES = ["No Fire", "Fire"]

# Email credentials (replace with your own or use environment variables)
EMAIL_SENDER = "sender@gmail.com"
EMAIL_PASSWORD = "Go to the app and search password"  # Use environment variables for security
EMAIL_RECEIVER = "receiver@gmail.com"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587

def send_email_alert():
    """Send an email alert when fire is detected."""
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_SENDER
        msg['To'] = EMAIL_RECEIVER
        msg['Subject'] = "ðŸ”¥ Fire Alert!"
        body = "Fire has been detected in the monitored area. Please take immediate action!"
        msg.attach(MIMEText(body, 'plain'))

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
        server.quit()
        print("Email alert sent!")
    except Exception as e:
        print("Error sending email:", e)

# Initialize webcam
cap = cv2.VideoCapture(0)  # Use 0 for default camera, change if needed

def preprocess_frame(frame):
    """Apply preprocessing to match training data."""
    img = cv2.resize(frame, (224, 224))  # Resize to match model input size
    img = img / 255.0  # Normalize pixel values
    img = np.expand_dims(img, axis=0)  # Add batch dimension
    return img

fire_detected = False  # Prevent multiple alerts for the same fire event

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    # Preprocess the frame
    processed_frame = preprocess_frame(frame)
    
    # Make prediction
    prediction = model.predict(processed_frame)
    label = "Fire" if prediction[0][0] > 0.5 else "No Fire"
    confidence = prediction[0][0] * 100 if label == "Fire" else (1 - prediction[0][0]) * 100

    
    # Display result
    text = f"{label}: {confidence:.2f}%"
    color = (0, 255, 0) if label == "No Fire" else (0, 0, 255)
    cv2.putText(frame, text, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
    cv2.imshow("Forest Fire Detection", frame)
    
    # Trigger alarm and email if fire is detected
    if label == "Fire" and confidence > 50:  # Adjust confidence threshold if needed
        winsound.Beep(1000, 500)  # Frequency: 1000Hz, Duration: 500ms
        if not fire_detected:
            send_email_alert()
            fire_detected = True  # Prevent multiple alerts
    else:
        fire_detected = False  # Reset when fire is not detected
    
    # Exit on 'q' key
    if cv2.waitKey(1) & 0xFF == ord('e'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
